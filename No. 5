// 暴力枚举法
class Solution {
    public String longestPalindrome(String s) {
        if(s.length() == 0 ){
            return s;
        }
        int left = 0, right = 0, count = 0,max = 0,maxi=0,maxj = 0;
        //char[] res = new char[1000];
        for(int i=0; i<s.length(); i+=1){
            for(int j=i+1;j<s.length();j+=1){
                left = i;
                right = j;
                // System.out.print(i);
                // System.out.print(j);
                count = j+1-i;
                while(left <= right){
                    char ch1 = s.charAt(left);
                    char ch2 = s.charAt(right);
                    if(ch1 == ch2){
                        left += 1;
                        right -= 1;
                        //count += 1;
                    }
                    else{
                        count = -1;
                        break;
                    }
                }
                if(count>max){
                    max = count;
                    maxi = i;
                    maxj = j;
                }
            }
        }
        return s.substring(maxi,maxj+1);
    }
}

// 中心扩散法

class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<1 || s == null) return "";
        int start = 0, end = 0;
        for(int i = 0; i < s.length(); i+= 1){
            int len1 = expandarountCenter(s,i,i);
            int len2 = expandarountCenter(s,i,i+1);
            int len = Math.max(len1,len2);
            if(len > end-start+1){
                start = i- (len-1)/2;
                end = i + len /2;
            }
        }
        return s.substring(start, end+1);
    }
     private int expandarountCenter(String s, int left, int right){
         int L = left, R = right;
         while(L>=0 && R<s.length() && s.charAt(L) == s.charAt(R)){
             L -= 1;
             R += 1;
         }
         return R-L-1;
     }
}
