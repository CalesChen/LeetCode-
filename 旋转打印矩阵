//第一个While 循环错误，错误原因在于没有考虑到top与bottom不等的情况

import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printMatrix(int [][] matrix) {
        if(matrix==null)
           return null;
        int len1 = matrix.length;
        int len2 = matrix[0].length;
        int left = 0, top = 0; 
        int right = len2-1,bottom = len1-1;
        //int[] res = new int[len1*len2];
        ArrayList<Integer> res = new ArrayList<Integer> ();
        /*while(left<=right && top<=bottom){
            for(int i = left; i<=right;i+=1){
                    //res[num++] = matrix[index1][i];
                    res.add(matrix[top][i]);
                }
             for(int j = top+1; j<=bottom;j+=1){
                    //res[num++] = matrix[i][len2-1-index2];
                    res.add(matrix[j][right]);
                } 
            for(int k = right-1; k>index1;k-=1){
                    //res[num++] = matrix[len1-1-index1][i];
                    res.add(matrix[len1-1-index1][k]);
                }
             for(int l = len1-index1-1; l>index1;l-=1){
                    //res[num++] = matrix[i][index2];
                    res.add(matrix[l][index2]);
                }
                index2 += 1;
                index1 += 1;
        }*/
        while(left<=right&&top<=bottom){
           //从左向右
           for(int i=left;i<=right;i++){
               res.add(matrix[top][i]);
           }
           //从上到下（从下一行开始向下走）
           for(int j=top+1;j<=bottom;j++){
               res.add(matrix[j][right]);
           }
           //从右到左
           if(top!=bottom){
               for(int k=right-1;k>=left;k--){
                   res.add(matrix[bottom][k]);
               }
           }
           //从下到上
           if(left!=right){
               for(int l=bottom-1;l>top;l--){
                   res.add(matrix[l][left]);
               }
           }
             
           //下一个正方形矩阵
           top++;left++;right--;bottom--;
        }
        return res;
    }
}
